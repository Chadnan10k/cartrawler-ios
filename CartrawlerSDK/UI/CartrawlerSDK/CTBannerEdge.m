//
//  CTBannerEdge.m
//
//  Created on 7/26/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

@import UIKit;
#import "CTBannerEdge.h"

@implementation CTBannerEdge

+ (void)drawArtboardWithFrame:(CGRect)targetFrame
                     resizing:(CTBannerEdgeResizingBehavior)resizing
                 primaryColor:(UIColor *)primaryColor {
    //! General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //! Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = CTBannerEdgeResizingBehaviorApply(resizing, CGRectMake(0, 0, 11, 32), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 11, resizedFrame.size.height / 32);
    
    //! Sale banner
    UIBezierPath *saleBanner = [UIBezierPath bezierPath];
    [saleBanner moveToPoint:CGPointZero];
    [saleBanner addLineToPoint:CGPointMake(9.91, 0)];
    [saleBanner addCurveToPoint:CGPointMake(10.93, 2.25) controlPoint1:CGPointMake(11.56, 0) controlPoint2:CGPointMake(12.02, 1)];
    [saleBanner addLineToPoint:CGPointMake(1.58, 13.48)];
    [saleBanner addCurveToPoint:CGPointMake(1.54, 18.56) controlPoint1:CGPointMake(0.71, 14.87) controlPoint2:CGPointMake(0.58, 17.2)];
    [saleBanner addLineToPoint:CGPointMake(10.92, 29.76)];
    [saleBanner addCurveToPoint:CGPointMake(9.91, 32) controlPoint1:CGPointMake(12.02, 31) controlPoint2:CGPointMake(11.56, 32)];
    [saleBanner addLineToPoint:CGPointMake(0, 32)];
    [saleBanner addLineToPoint:CGPointZero];
    [saleBanner closePath];
    [saleBanner moveToPoint:CGPointZero];
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 5.76, 16);
    CGContextScaleCTM(context, -1, 1);
    CGContextRotateCTM(context, 2 * M_PI);
    CGContextTranslateCTM(context, -5.76, -16);
    saleBanner.usesEvenOddFillRule = YES;
    [primaryColor setFill];
    [saleBanner fill];
    CGContextRestoreGState(context);
    
    CGContextRestoreGState(context);
}

#pragma mark - Resizing Behavior

CGRect CTBannerEdgeResizingBehaviorApply(CTBannerEdgeResizingBehavior behavior, CGRect rect, CGRect target) {
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero)) {
        return rect;
    }
    
    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);
    
    switch (behavior) {
        case CTBannerEdgeResizingBehaviorAspectFit: {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case CTBannerEdgeResizingBehaviorAspectFill: {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case CTBannerEdgeResizingBehaviorStretch:
            break;
        
        case CTBannerEdgeResizingBehaviorCenter: {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }
    
    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}


@end
